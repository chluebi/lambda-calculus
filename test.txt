type nat = | S nat | O in
let iszeronat =
(\x -> 
    match x : nat with
    | O -> true
    | _ -> false
    end
)
in
let addnat =
Y (\f x y -> 
    match y : nat with
        | O -> x
        | S yy -> f (S x) yy
    end
)
in
let subnat =
Y (\f x y ->
    match y : nat with
        | O -> x
        | S yy -> (
            match x : nat with
                | O -> O
                | S xx -> f xx yy
            end
        )
    end
)
in
type tree = | Node tree tree | Leaf nat in
let treesum =
Y (\f t ->
    match t : tree with
        | Node a b -> add (f a) (f b)
        | Leaf x -> x
    end
)
in
let sometree = Node (Leaf 15) (Leaf 0) in
iszero ((treesum sometree) - 10)



    