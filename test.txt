let add = (\m -> (\n -> (\f -> (\x -> m f (n f x))))) in
let zero = (\f -> (\x -> x)) in
let one = (\f -> (\x -> f x)) in
let exp = (\m -> (\n -> n m)) in
let four = add (add one one) (add one one) in
let pred = (\n -> (\f -> (\x -> n (\g -> (\h -> h (g f))) (\u -> x) (\x -> x)))) in 
let sixteen = exp four (add one one) in 
pred (add one one)
