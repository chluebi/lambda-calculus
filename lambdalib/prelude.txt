let zero = (\f x -> x) in
let one = (\f x -> f x) in

let succ = (\n f x -> f (n f x)) in
let add = (\m n -> m succ n) in
let mul = (\m n -> m (add n) zero) in
let exp = (\m n -> n m) in
let pred = (\n f x -> n (\g h -> h (g f)) (\u -> x) (\x -> x)) in
let sub = (\m n -> n pred m) in

let true = (\x y -> x) in
let false = (\x y -> y) in
let and = (\p q -> p q p) in
let or = (\p q -> p p q) in
let not = (\p -> p false true) in
let ifthenelse = (\p a b -> p a b) in

let iszero = (\n -> n (\x -> false) true) in
let leq = (\m n -> iszero (sub m n)) in
let geq = (\m n -> iszero (sub n m)) in
let lt = (\m n -> not (geq m n)) in
let gt = (\m n -> not (leq m n)) in
let eq = (\m n -> and (leq m n) (geq m n)) in

let Y = (\g -> (\x -> g (x x)) (\x -> g (x x))) in
let div = Y (\f n m -> if n >= m then (1 + (f (n - m) m)) else 0) in
let fact = Y (\f n -> if n = 0 then 1 else n * (f (n-1))) in

let pair = (\x y f -> f x y) in
let first = (\p -> p true) in
let second = (\p -> p false) in

let nil = (\x -> true) in
let isnil = (\p -> p (\x y -> false)) in
let cons = pair in
let nth = Y (\f i d l -> if (isnil l) then d else (if (iszero i) then (first l) else (f (pred i) d (second l)))) in
let append = Y (\f to_append l -> if (isnil l) then to_append else (pair (first l) (f to_append (second l)))) in
let map = Y (\f g l -> if (isnil l) then nil else cons (g (first l)) (f g (second l))) in