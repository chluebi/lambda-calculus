let zero = (\f x -> x) in
let one = (\f x -> f x) in
let succ = (\n f x -> f (n f x)) in
let add = (\m n -> m succ n) in
let mul = (\m n -> m (add n) zero) in
let exp = (\m n -> n m) in
let pred = (\n f x -> n (\g h -> h (g f)) (\u -> x) (\x -> x)) in
let sub = (\m n -> n pred m) in